body {
  padding: 0;
  margin: 0;
}
.App {
  text-align: center;
  font-family: Yu Gothic UI;  
   /* position: relative; */
  overflow: hidden; 
}

a {
  text-decoration: none;
  color: rgb(78, 73, 73);
}

* {
  box-sizing: border-box;
}


/* import React, { Component } from "react";
import "./App.css";
import Homepage from "./pages/homepage/homepage";
import { Route, Switch, Redirect } from "react-router-dom";
import Header from "./components/header/header";
import { connect } from "react-redux";

import { createStructuredSelector } from "reselect";
import { selectCurrentUser } from "./redux/user/user.selectors";
import CheckoutPage from "./pages/checkout-page/checkout-page";
import Footer from "./components/footer/footer";
import ShopPage from "./pages/shop-page/shop-page"
import { fetchUser } from "./redux/user/user.actions";
import AdminDashboard from "./components/admin-dashboard/admin-dashboard";
import UserDashboard from "./components/user-dashboard/user-dashboard";
import AdminProtectedRoute from "./components/protected-routes/admin-protected-route";
import UserProtectedRoute from "./components/protected-routes/user-protected-route";



class App extends Component {
  
  componentDidMount() {
    this.props.fetchUser()
    
  }

  render() {
    const { currentUser } = this.props;    
    return (
      <div className="App">
        <Header />
        
        <Switch>
          <Route exact path="/" component={Homepage} />
          <Route path="/shop" component={ShopPage} />
          <Route exact path="/checkout" component={CheckoutPage} />
          <AdminProtectedRoute            
           exact path="/admin"
            component={AdminDashboard}
          />
          <UserProtectedRoute            
            exact path="/dashboard"
            component={UserDashboard}
            // path, match, history are past to the component as props, where we receive them as ...rest
          />

        </Switch>
        <Footer />
      </div>
    );
  }
}

const mapDispatchToProps = (dispatch) => ({
  fetchUser: () => dispatch(fetchUser()),
});

const mapStateToProps = createStructuredSelector({
  currentUser: selectCurrentUser,
});

export default connect(mapStateToProps, mapDispatchToProps)(App); */